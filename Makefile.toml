[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true

[env.development]
PROFILE = "dev"

[env.production]
PROFILE = "release"

[tasks.default]
clear = true
run_task = "move-plugin"

[tasks.run]
clear = true
workspace = false
# run_task = { name = "default", fork = true, cleanup_task = "logjam" }
run_task = { name = "logjam" }

[tasks.logjam]
cwd = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/portable/"
command = "cmd"
args = ["/C", "logjam.exe"]

[tasks.fmt]
clear = true
command = "cargo"
args = ["fmt"]

[tasks.build]
dependencies = ["fmt"]
clear = true
command = "cargo"
args = ["build", "--profile", "${PROFILE}"]

[tasks.move-plugin]
dependencies = ["build"]
script_runner = "@rust"
script = '''
use std::{env, fs, path::Path};

fn main() -> Result<(), Box<dyn std::error::Error>> {
	let name = env::var("CARGO_MAKE_CRATE_NAME")?;
	let target_dir = env::var("CARGO_MAKE_CRATE_TARGET_DIRECTORY")?;
	let profile = env::var("PROFILE")?;

	let mut target_profile = Path::new(&target_dir).join("x86_64-pc-windows-msvc");
	if profile == "release" {
	    target_profile = target_profile.join("release");
	} else {
	    target_profile = target_profile.join("debug");
	}

	let dll_path = target_profile.join(format!("{}.dll", name));
	let plugins_path = Path::new(&target_dir).join("portable").join("plugins");
		
	if dll_path.exists() {
		fs::create_dir_all(&plugins_path)?;
		fs::copy(&dll_path, plugins_path.join(format!("{}.dll", name)))?;
	}
	
    Ok(())
}
'''